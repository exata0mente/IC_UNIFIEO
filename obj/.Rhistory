plot(y = N, x = instante, ylim = c(conj$min,conj$max))        # Plotagem do gráfico em branco, definindo
# os limites máximo e mínimo do eixo y
amostra <- read.csv2(file = arquivoTemp,
dec = ".",
skipNul = 3,
row.names = NULL
)
for(j in seq(conj$tam)){
## Leitura de cada elemento (dado) da leitura efetuada
points(x = j + i*conj$tam, amostra[(j+1),1])
Sys.sleep((tempo*1.1)/conj$tam)   # Sabendo que em t tempo temos conj$tam podemos
# estimar quanto tempo para cada dado ser plotado no mapa
# respeitando o tempo entre uma leitura e outra.
}
}
graphics.off()
readLines(arquivoTemp)
cat
cat()
cat(arquivoTemp)
cat(readLines(arquivoTemp))
readLines(arquivoTemp)
?cat
readLines(arquivoTemp)
cat(readLines(arquivoTemp))
amostra
?write.csv2()
list.files()
file.create("teste.csv")
list.files()
write.csv2("4;99")
write.csv2(x = "4;99",file = "teste.csv")
read.csv2("teste.csv")
write.csv2("4;99",file = "teste.csv")
read.csv2("teste.csv")
read.csv2(file = arquivoTemp,
dec = ".",
skipNul = 3,
row.names = NULL
)
arroz <- "99"
read.csv("teste.csv")
write.csv2(arroz,file = "teste.csv")
read.csv2("teste.csv")
file.remove("teste.csv")
list.files()
write.csv("teste.csv", arroz)
list.files()
file.remove("99")
write.csv(x = arroz, file = "teste.csv")
list.files()
read.csv("teste.csv")
arroz
class(arroz)
as.numeric(arroz)
arroz <- as.numeric(arroz)
arroz
write.csv(x = arroz, file = "teste.csv")
write.csv(x = arroz*3, file = "teste.csv", append = TRUE)
arroz <- as.character(arroz)
arroz
write.csv(x = arroz, file = "teste.csv")
write.csv(x = arroz, file = "teste.csv", append = TRUE)
cat(arquivoTemp)
readLines(arquivoTemp)
writeLines((readLines(arquivoTemp)),con = "teste.txt")
list.files()
readLines("teste.txt")
writeLines("29.99",con = "teste.txt")
readLines("teste.txt")
?writeLines("29.99",con = "teste.txt")
cat("28.99", file = "teste.txt")
readLines("teste.txt")
cat("28.99\n", file = "teste.txt")
readLines("teste.txt")
cat("28.99\n", file = "teste.txt", append = TRUE)
readLines("teste.txt")
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
readLines("teste.txt")
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
readLines("teste.txt")
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
readLines("teste.txt")
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
readLines("teste.txt")
file.remove(c("teste.csv"))
file.remove(c("teste.txt"))
ls()
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
cat(readLines(arquivoTemp), file = "teste.txt", append = TRUE)
readLines("teste.txt")
read.csv2(file = "teste.txt",
dec = ".",
skipNul = 3,
row.names = NULL
)
cat(readLines(arquivoTemp), fill = TRUE)
cat(c(readLines(arquivoTemp),readLines(arquivoTemp)), fill = TRUE)
list.files()
readLines("teste.txt")
read.csv("teste.txt")
read.csv("teste.txt",sep = " ")
writeLines(text = read.serialConnection(conexao),
con = "teste.txt",
sep = "\n")
writeLines(text = read.serialConnection(conexao),
#con = "teste.txt",
sep = "\n")
amostra
write.csv2(amostra, "teste.csv")
write.csv2(amostra, "teste.csv", append = TRUE)
arquivoTemp
paste(getwd())
paste(getwd(),"\")
paste(c(getwd()),";")
paste(c(getwd()),";", collapse = FALSE)
?paste
paste(c(getwd()),"Ola",sep="/")
k <- 4
paste(c(getwd(), "/conj", k), sep = "")
paste(c(getwd(), "/conj", k))
paste(c(getwd(), "/conj", k),sep = "")
paste(c(getwd(), "/conj", k),sep = " ")
paste(c(getwd(), "/conj", k),sep = "\")
)
)
paste(getwd())
paste(c(getwd(),AAAAA), sep="")
paste(c(getwd(),"AAAAA"), sep="")
paste(c(getwd(),"AAAAA"), sep="",collapse = "")
paste(c(getwd(),"/AAAAA"),collapse = "")
paste(c(getwd(),"/conjunto",k),collapse = "")
paste(c(getwd(),"/conjunto",k),collapse = "")
file.copy(from = arquivoTemp,
to = paste(c(getwd(),"/conjunto",i),collapse = "")
)
reiniciaConexao()
reiniciaConexao(con = con)
reiniciaConexao(conexao)
validaConexao()
tamanhoEstimadoAmostra <- function(con = NULL, arquivo = tempfile(), n = 10, t = 1.01 ){
## Estima o tamanho das amostras lidas, dado tempo e leituras
## @param objeto da classe 'serialConnection'
## @param arquivo caminho do arquivo em que será gravado
## @param n quantidade de leituras realizadas
## @param t intervalo, em segundos, entre cada leitura
## @return lista com os valores máximo, minimo e tamanho da amostra.
message("Vamos começar")
Sys.sleep(1)
message("Iniciando estimativa da amostra...")
taxaEstimada <- c()
while (n > 0) {
obtemAmostra(con, arquivo)
amostra <- read.csv2(arquivo, dec = ".");#print(nrow(amostra))
tamanhoAmostra <- nrow(amostra)
Sys.sleep(t)
taxaEstimada <- c(taxaEstimada,nrow(amostra))
n = n - 1
}
## tratamento dos outliers
message("Pronto!")
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == min(taxaEstimada)))]
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == max(taxaEstimada)))]
list(tam = min(taxaEstimada),
max = max(taxaEstimada) * 3,
min = 0
)
}
tempo <- 1.01
rm(k)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
tamanhoEstimadoAmostra <- function(con = NULL, arquivo = tempfile(), n = 10, t = 1.01 ){
## Estima o tamanho das amostras lidas, dado tempo e leituras
## @param objeto da classe 'serialConnection'
## @param arquivo caminho do arquivo em que será gravado
## @param n quantidade de leituras realizadas
## @param t intervalo, em segundos, entre cada leitura
## @return lista com os valores máximo, minimo e tamanho da amostra.
message("Vamos começar")
Sys.sleep(1)
message("Iniciando estimativa da amostra...")
taxaEstimada <- c()
while (n > 0) {
if(obtemAmostra(con, arquivo))
message("Deu ruim")
amostra <- read.csv2(arquivo, dec = ".");#print(nrow(amostra))
tamanhoAmostra <- nrow(amostra)
Sys.sleep(t)
taxaEstimada <- c(taxaEstimada,nrow(amostra))
n = n - 1
}
## tratamento dos outliers
message("Pronto!")
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == min(taxaEstimada)))]
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == max(taxaEstimada)))]
list(tam = min(taxaEstimada),
max = max(taxaEstimada) * 3,
min = 0
)
}
reiniciaConexao(conexao)
tempo <- 1.01
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
?try
tamanhoEstimadoAmostra <- function(con = NULL, arquivo = tempfile(), n = 10, t = 1.01 ){
## Estima o tamanho das amostras lidas, dado tempo e leituras
## @param objeto da classe 'serialConnection'
## @param arquivo caminho do arquivo em que será gravado
## @param n quantidade de leituras realizadas
## @param t intervalo, em segundos, entre cada leitura
## @return lista com os valores máximo, minimo e tamanho da amostra.
message("Vamos começar")
Sys.sleep(1)
message("Iniciando estimativa da amostra...")
taxaEstimada <- c()
while (n > 0) {
try(obtemAmostra(con, arquivo))
message("Deu ruim")
amostra <- read.csv2(arquivo, dec = ".");#print(nrow(amostra))
tamanhoAmostra <- nrow(amostra)
Sys.sleep(t)
taxaEstimada <- c(taxaEstimada,nrow(amostra))
n = n - 1
}
## tratamento dos outliers
message("Pronto!")
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == min(taxaEstimada)))]
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == max(taxaEstimada)))]
list(tam = min(taxaEstimada),
max = max(taxaEstimada) * 3,
min = 0
)
}
reiniciaConexao(conexao)
validaConexao()
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
try(obtemAmostra(con, arquivo))
try(obtemAmostra(con, arquivo))
try(log(""))
try(log("a"))
print(.Last.value)
print(try(log("a"), TRUE))
reiniciaConexao()
reiniciaConexao(conexao)
validaConexao()
conj <- try(tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo))
conj <- try(tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo))
## Estima o tamanho das amostras lidas, dado tempo e leituras
## @param objeto da classe 'serialConnection'
## @param arquivo caminho do arquivo em que será gravado
## @param n quantidade de leituras realizadas
## @param t intervalo, em segundos, entre cada leitura
## @return lista com os valores máximo, minimo e tamanho da amostra.
message("Vamos começar")
conj <- try(tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo))
tamanhoEstimadoAmostra <- function(con = NULL, arquivo = tempfile(), n = 10, t = 1.01 ){
## Estima o tamanho das amostras lidas, dado tempo e leituras
## @param objeto da classe 'serialConnection'
## @param arquivo caminho do arquivo em que será gravado
## @param n quantidade de leituras realizadas
## @param t intervalo, em segundos, entre cada leitura
## @return lista com os valores máximo, minimo e tamanho da amostra.
message("Vamos começar")
Sys.sleep(1)
message("Iniciando estimativa da amostra...")
taxaEstimada <- c()
while (n > 0) {
amostra <- read.csv2(arquivo, dec = ".");#print(nrow(amostra))
tamanhoAmostra <- nrow(amostra)
Sys.sleep(t)
taxaEstimada <- c(taxaEstimada,nrow(amostra))
n = n - 1
}
## tratamento dos outliers
message("Pronto!")
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == min(taxaEstimada)))]
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == max(taxaEstimada)))]
list(tam = min(taxaEstimada),
max = max(taxaEstimada) * 3,
min = 0
)
}
tempo <- 1.01
conj <- try(tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo))
reiniciaConexao(conexao)
conj <- try(tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo))
conj
list(tam = min(taxaEstimada),
max = max(taxaEstimada) * 3,
min = 0
)
tamanhoEstimadoAmostra <- function(con = NULL, arquivo = tempfile(), n = 10, t = 1.01 ){
## Estima o tamanho das amostras lidas, dado tempo e leituras
## @param objeto da classe 'serialConnection'
## @param arquivo caminho do arquivo em que será gravado
## @param n quantidade de leituras realizadas
## @param t intervalo, em segundos, entre cada leitura
## @return lista com os valores máximo, minimo e tamanho da amostra.
message("Vamos começar")
Sys.sleep(1)
message("Iniciando estimativa da amostra...")
taxaEstimada <- c()
while (n > 0) {
obtemAmostra(con, arquivo)
amostra <- read.csv2(arquivo, dec = ".");#print(nrow(amostra))
tamanhoAmostra <- nrow(amostra)
Sys.sleep(t)
taxaEstimada <- c(taxaEstimada,nrow(amostra))
n = n - 1
}
## tratamento dos outliers
message("Pronto!")
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == min(taxaEstimada)))]
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == max(taxaEstimada)))]
list(tam = min(taxaEstimada),
max = max(taxaEstimada) * 3,
min = 0
)
}
reiniciaConexao(conexao)
conj <- try(tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo))
reiniciaConexao(conexao)
conj <- tryCatch(tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo))
obtemAmostra(con, arquivo)
tamanhoEstimadoAmostra <- function(con = NULL, arquivo = tempfile(), n = 10, t = 1.01 ){
## Estima o tamanho das amostras lidas, dado tempo e leituras
## @param objeto da classe 'serialConnection'
## @param arquivo caminho do arquivo em que será gravado
## @param n quantidade de leituras realizadas
## @param t intervalo, em segundos, entre cada leitura
## @return lista com os valores máximo, minimo e tamanho da amostra.
message("Vamos começar")
Sys.sleep(1)
message("Iniciando estimativa da amostra...")
taxaEstimada <- c()
while (n > 0) {
obtemAmostra(con, arquivo)
try(amostra <- read.csv2(arquivo, dec = "."));#print(nrow(amostra))
tamanhoAmostra <- nrow(amostra)
Sys.sleep(t)
taxaEstimada <- c(taxaEstimada,nrow(amostra))
n = n - 1
}
## tratamento dos outliers
message("Pronto!")
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == min(taxaEstimada)))]
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == max(taxaEstimada)))]
list(tam = min(taxaEstimada),
max = max(taxaEstimada) * 3,
min = 0
)
}
tempo <- 1.01
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
tempo <- 1.01
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
amostra
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
amostra
closeAllConnections()
validaConexao(conexao)
close(conexao)
validaConexao(conexao)
close(conexao)
tempo <- 1.01
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
validaConexao(conexao)
tempo <- 1.01
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
close(conexao)
## Limpeza do ambiente
rm(list=ls())
graphics.off()
## Carregamento dos pacotes necessários
require("serial")
source("main.R")
conexao <- conectarArduino(mode = "9600,n,8,1")
validaConexao()
arquivoTemp <- tempfile()
tempo <- 1.01
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
reiniciaConexao(conexao)
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
tempo <- 1.01
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
validaConexao()
tempo <- 1.01
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
obtemAmostra(con, arquivo)
try(amostra <- read.csv2(arquivo, dec = "."));#print(nrow(amostra))
obtemAmostra(con, arquivo)
try(amostra <- read.csv2(arquivo, dec = "."));#print(nrow(amostra))
tempo <- 1.01
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
if(try(x < 0))
print("oi")
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
tamanhoEstimadoAmostra <- function(con = NULL, arquivo = tempfile(), n = 10, t = 1.01 ){
## Estima o tamanho das amostras lidas, dado tempo e leituras
## @param objeto da classe 'serialConnection'
## @param arquivo caminho do arquivo em que será gravado
## @param n quantidade de leituras realizadas
## @param t intervalo, em segundos, entre cada leitura
## @return lista com os valores máximo, minimo e tamanho da amostra.
message("Vamos começar")
Sys.sleep(1)
message("Iniciando estimativa da amostra...")
taxaEstimada <- c()
try(
while (n > 0) {
obtemAmostra(con, arquivo)
(amostra <- read.csv2(arquivo, dec = "."));#print(nrow(amostra))
tamanhoAmostra <- nrow(amostra)
Sys.sleep(t)
taxaEstimada <- c(taxaEstimada,nrow(amostra))
n = n - 1
}
)
## tratamento dos outliers
message("Pronto!")
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == min(taxaEstimada)))]
taxaEstimada <- taxaEstimada[-(which(taxaEstimada == max(taxaEstimada)))]
list(tam = min(taxaEstimada),
max = max(taxaEstimada) * 3,
min = 0
)
}
reiniciaConexao(conexao)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
close(conexao)
## Limpeza do ambiente
rm(list=ls())
graphics.off()
## Carregamento dos pacotes necessários
require("serial")
source("main.R")
conexao <- conectarArduino(mode = "9600,n,8,1")
validaConexao()
arquivoTemp <- tempfile()
tempo <- 1.01
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
conj <- tamanhoEstimadoAmostra(conexao, arquivoTemp, n = 10, t = tempo)
## Definição dos objetos que farão parte do ciclo de leitura dos dados
N <- rep(NA,conj$tam) # Cria uma cadeia do tamanho da amostra com valores NA.
# Utilizamos para montar o gráfico em branco.
ciclo <- 1000
# Utilizamos para montar o gráfico em branco.
ciclo <- 10
for(i in 0:(ciclo-1)){
## Início da leitura, em ciclos, dos dados gerados pelo dispositivo
obtemAmostra(conexao, arquivoTemp)
instante <- ((i*conj$tam):((i+1)*(conj$tam)))[-1]             # Aqui geramos o vetor que definirá o eixo x do
# gráfico, acompanhando cada dado da leitura.
plot(y = N, x = instante, ylim = c(conj$min,conj$max))        # Plotagem do gráfico em branco, definindo
# os limites máximo e mínimo do eixo y
amostra <- read.csv2(file = arquivoTemp,
dec = ".",
skipNul = 3,
row.names = NULL
)
file.copy(from = arquivoTemp,
to = paste(c(getwd(),"/conjunto",i),collapse = "")
)
for(j in seq(conj$tam)){
## Leitura de cada elemento (dado) da leitura efetuada
points(x = j + i*conj$tam, amostra[(j+1),1])
Sys.sleep((tempo*1.1)/conj$tam)   # Sabendo que em t tempo temos conj$tam podemos
# estimar quanto tempo para cada dado ser plotado no mapa
# respeitando o tempo entre uma leitura e outra.
}
}
file.remove("conjunto*")
grep("conjunto", list.files(getwd()))
grep("conjunto", list.files(getwd()))
devDir <- list.files("/dev/")
portaTTY <- grep("ttyUSB", devDir)
list.files(getwd())
grep("conjunto", list.files(getwd()))
arquivosConjuntos <- list.files(getwd())
arquivosConjuntos <- grep("conjunto", arquivosConjuntos)
save.image(".RData")
ls
q("no")
