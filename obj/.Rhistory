citation()
library("dplyr")
install.packages("dplyr")
citation("dplyr")
citation("ggplot2")
x <- citation("dplyr")
toBibtex(x)
write.table(toBibtex(x), "Downloads/dplyr.bib")
install.packages("ggplot2")
x <- citation("ggplot2")
toBibtex(x)
installed.packages("serial")
citation("serial")
install.packages("serial")
citation("serial")
vignette("serial")
q("yes")
teste <- GET("https://www.catalogodasartes.com.br/acesso/")
library(httr)
teste <- GET("https://www.catalogodasartes.com.br/acesso/")
test
teste
GET("https://www.catalogodasartes.com.br/obra/cePBDG/")
url("https://www.catalogodasartes.com.br/obra/cePBDG/")
con <- url("https://www.catalogodasartes.com.br/obra/cePBDG/")
teste <- readLines(con)
teste
GET("https://www.catalogodasartes.com.br/obra/cePBDG/", authenticate("profantonioalbuquerque@gmail.com","flamengo"))
teste <- GET("https://www.catalogodasartes.com.br/obra/cePBDG/", authenticate("profantonioalbuquerque@gmail.com","flamengo"))
teste
teste
readLines(teste)
content(teste)
teste2 <- content(teste, as="text")
teste2
library(XML)
parsedHTML
parsedHTML()
??parsedHTML
htmlParse(teste2, asText = TRUE)
teste3 <- htmlParse(teste2, asText = TRUE)
teste3
xpathSApply(teste3, "//tr[@class="produto-avaliacao"]")
xpathSApply(teste3, "//tr[@class="produto-avaliacao"]", xmlValue)
xpathSApply(teste3, "//tr[@class='produto-avaliacao']", xmlValue)
teste <- GET("https://www.catalogodasartes.com.br/obra/cePBDG/", authenticate("profantonioalbuquerque@gmail.com","flamengo"))
teste2 <- content(teste, as="text")
teste3 <- htmlParse(teste2, asText = TRUE)
xpathSApply(teste3, "//tr[@class='produto-avaliacao']", xmlValue)
q("no")
tty
??tty
library(serial)
?open
serialConnection()
serialConnection
serial
listPorts()
listPorts
listPorts()
serialConnection
open
read.serialConnection
open
??open.serialconnection
scan
serialConnection
read.serialConnection(
read.serialConnection
isOpen
isOpen.serialConnection
isOpen
?isOpen
??.Tcl
tryCatch(
tryCatch
q("no")
library(httr)
?cookies
?cookies
set_cookies()
cookies()
?cookies
set_cookies(`catalogodasartes_language_code` = "pt-BT",
`__gat` = "1",
`__gid` = "GA1.3.1390949446.1534799972",
`__ga` = "GA1.3.1453857147.1534799972")
GET("https://www.catalogodasartes.com.br/obra/cePBDG/",
set_cookies(`catalogodasartes_language_code` = "pt-BT",
`__gat` = "1",
`__gid` = "GA1.3.1390949446.1534799972",
`__ga` = "GA1.3.1453857147.1534799972"))
teste2 <- content(teste, as="text")
teste <- GET("https://www.catalogodasartes.com.br/obra/cePBDG/",
set_cookies(`catalogodasartes_language_code` = "pt-BT",
`__gat` = "1",
`__gid` = "GA1.3.1390949446.1534799972",
`__ga` = "GA1.3.1453857147.1534799972"))
teste2 <- content(teste, as="text")
teste3 <- htmlParse(teste2, asText = TRUE)
library(XML)
teste3 <- htmlParse(teste2, asText = TRUE)
xpathSApply(teste3, "//tr[@class='produto-avaliacao']", xmlValue)
set_cookies(`catalogodasartes_language_code` = "pt-BT",
set_cookies(`catalogodasartes_language_code` = "pt-BT", `__gat` = "1", `__gid` = "GA1.3.1390949446.1534799972", `__ga` = "GA1.3.1453857147.1534799972")
library(httr)
teste <- GET(url="https://www.catalogodasartes.com.br/obra/cePAPA", set_cookies(`catalogodasartes_language_code` = "pt-BT", `__gat` = "1", `__gid` = "GA1.3.1390949446.1534799972", `__ga` = "GA1.3.1453857147.1534799972")
)
teste
teste$cookies
teste3 <- htmlParse(teste2, asText = TRUE)
teste2 <- content(teste, as="text")
teste2
set_cookies(`catalogodasartes_language_code` = "pt-BT", `__gat` = "1", `__gid` = "GA1.3.1390949446.1534799972", `__ga` = "GA1.3.1453857147.1534799972")
set_cookies(`catalogodasartes_language_code` = "pt-BT", `_gat` = "1", `_gid` = "GA1.3.1390949446.1534799972", `_ga` = "GA1.3.1453857147.1534799972")
teste <- GET(url="https://www.catalogodasartes.com.br/obra/cePAPA/",set_cookies(`catalogodasartes_language_code` = "pt-BT", `_gat` = "1", `_gid` = "GA1.3.1390949446.1534799972", `_ga` = "GA1.3.1453857147.1534799972")
)
teste2 <- content(teste, as="text")
teste3 <- htmlParse(teste2, asText = TRUE)
xpathSApply(teste3, "//tr[@class='produto-avaliacao']", xmlValue)
teste3
teste2
cookies(teste3)
cookies(teste)
set_cookies("catalogodasartes_language_code" = "pt-BT", "_gat" = "1", "_gid" = "GA1.3.1390949446.1534799972", "_ga" = "GA1.3.1453857147.1534799972")
url <- rm(list = ls())
rm(url)
url <- "https://www.catalogodasartes.com.br/acesso/"
cookies <- set_cookies("catalogodasartes_language_code" = "pt-BT", "_gat" = "1", "_gid" = "GA1.3.1390949446.1534799972", "_ga" = "GA1.3.1453857147.1534799972")
cookies$method
cookies
cookies$auth_token
cookies$url
cookies$fields
cookies$options
r <- GET(url, set_cookies(cookies))
r <- GET(url, cookies
)
r
conten(r)
content(r)$cookies
library(XML)
content(r)$cookies
install.packages("xml2")
content(r)$cookies
url <- "https://www.catalogodasartes.com.br/obra/APPUeP"
r <- GET(url, cookies)
content(r)$cookies
r
r$content
r$handle
r$cookies
content(r)
teste2 <- content(teste, as="text")
teste2 <- content(r, as="text")
teste2
q("no")
history()
q("no")
library(ttr)
library(httr)
url <- "https://www.catalogodasartes.com.br/obra/APPUeP"
r <- GET(url)
cookies(r)
cookies(r)
r$cookies
r$headers
r$headers
r$times
r$handle
r$request
r$headers
r$all_headers
r$content
r$request
r$headers
?config
r$all_headers
headers(r)
x <-  GET("http://httpbin.org/get")
x$headers$connection
warn_for_status(r)
stop_for_status(r)
r <- GET(url)
x$headers
x$headers
r$headers
require("serial")
validaPortaLinux <- function(){
devDir <- list.files("/dev/")
portaTTY <- grep("ttyUSB", devDir)
if(length(portaTTY) > 1)
stop("Ha mais de uma porta ttyUSB*. Favor identificar a correta e utilizar a funcao definePortaLinux")
else
print(devDir[portaTTY])
}
definePortaLinux <- function(porta = validaPortaLinux()){
porta
}
validaPortaLinux()
definePortaLinux()
list.files("/dev")
list.files("/dev")
list.files("/dev")
serialConnection()
?serialConnection
rm(x)
con <- serialConnection(definePortaLinux(), mode = "9600,n,8,1")
con$port
con <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1")
con
con$port
validaPortaLinux <- function(){
devDir <- list.files("/dev/")
portaTTY <- grep("ttyUSB", devDir)
if(length(portaTTY) > 1)
stop("Ha mais de uma porta ttyUSB*. Favor identificar a correta e utilizar a funcao definePortaLinux")
else
devDir[portaTTY]
}
definePortaLinux <- function(porta = validaPortaLinux()){
porta
}
close(con)
rm(con)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1")
x
x$port
open(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
close(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1", newline = TRUE)
open(x)
read.serialConnection(x)
close(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1", newline = TRUE, translation = "crlf")
open(x)
read.serialConnection(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1")
close(x)
rm(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1")
open(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
close(x)
rm(x)
require("serial")
# Definição da porta serial emulada
validaPortaLinux <- function(){
devDir <- list.files("/dev/")
portaTTY <- grep("ttyUSB", devDir)
if(length(portaTTY) > 1)
stop("Ha mais de uma porta ttyUSB*. Favor identificar a correta e utilizar a funcao definePortaLinux")
else
devDir[portaTTY]
}
definePortaLinux <- function(porta = validaPortaLinux()){
porta
}
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1")
open(conexao)
read.serialConnection(conexao)
# Fim da conexão com o dispositivo
close(conexao)
read.serialConnection(conexao)
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
a <- read.serialConnection(conexao)
a
class(a)
file?
?file
arquivoTemp <- tempfile()
?write.table
isOpen(conexao)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\r")
read.csv(arquivoTemp)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\n")
read.csv(arquivoTemp)
read.csv(arquivoTemp)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\n")
read.csv(arquivoTemp)
a <- read.csv(arquivoTemp)
a
class(a)
a$x
read.serialConnection(conexao)
?read.serialConnection(conexao)
read.serialConnection(conexao)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\r")
read.table(arquivoTemp)
read.table(arquivoTemp, sep = "\n")
write.table(read.serialConnection(conexao), file = arquivoTemp)
read.table(arquivoTemp)
?data.frame
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
close(conexao)
read.serialConnection(conexao)
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
?read.serialConnection
?serialConnection
?serialConnection
close(x)
isOpen(conexao)
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "crlf")
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
open(conexao)
read.serialConnection(conexao)
# Fim da conexão com o dispositivo
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "crlf")
open(conexao)
read.serialConnection(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
swirl()
package("swirl")
library(swirl)
swirl()
swirl()
rm(list-ls())
rm(list=ls())
?substr
library(swirl)
rm(list=ls())
swirl()
read.csv(path2csv, stringsAsFactors = TRUE)
mydfs <- read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydfs)
head(mydf)
library(dplyr)
packageVersion("dplyr")
save()
save.image()
exit
quit
bye()
aa
quit()
sessionInfo()
library(swirl)
swirl()
rm(list=ls())
swirl()
cran<- tbl_df(mydf)
help()
swirl()
mydf <- read.csv(file = path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dply")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
size(cran)
object.size(cran)
object_size(cran)
object_size(cran, units="MB")
object.size(cran, units="MB")
object.size(cran, units="Mb")
format(object.size(cran, units="Mb"))
format(object.size(cran), units="Mb")
as_tibble()
as_tibble(cran)
cran
setwd("~/Projetos/Iniciacao_Cientifica_FIEO/obj/")
## Limpeza do ambiente
rm(list=ls())
graphics.off()
## Carregamento dos pacotes necessários
require("serial")
source("main.R")
list.files("../obj/")
q("no")
