close(x)
rm(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1")
open(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
close(x)
rm(x)
require("serial")
# Definição da porta serial emulada
validaPortaLinux <- function(){
devDir <- list.files("/dev/")
portaTTY <- grep("ttyUSB", devDir)
if(length(portaTTY) > 1)
stop("Ha mais de uma porta ttyUSB*. Favor identificar a correta e utilizar a funcao definePortaLinux")
else
devDir[portaTTY]
}
definePortaLinux <- function(porta = validaPortaLinux()){
porta
}
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1")
open(conexao)
read.serialConnection(conexao)
# Fim da conexão com o dispositivo
close(conexao)
read.serialConnection(conexao)
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
a <- read.serialConnection(conexao)
a
class(a)
file?
?file
arquivoTemp <- tempfile()
?write.table
isOpen(conexao)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\r")
read.csv(arquivoTemp)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\n")
read.csv(arquivoTemp)
read.csv(arquivoTemp)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\n")
read.csv(arquivoTemp)
a <- read.csv(arquivoTemp)
a
class(a)
a$x
read.serialConnection(conexao)
?read.serialConnection(conexao)
read.serialConnection(conexao)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\r")
read.table(arquivoTemp)
read.table(arquivoTemp, sep = "\n")
write.table(read.serialConnection(conexao), file = arquivoTemp)
read.table(arquivoTemp)
?data.frame
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
close(conexao)
read.serialConnection(conexao)
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
?read.serialConnection
?serialConnection
?serialConnection
close(x)
isOpen(conexao)
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "crlf")
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
open(conexao)
read.serialConnection(conexao)
# Fim da conexão com o dispositivo
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "crlf")
open(conexao)
read.serialConnection(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
swirl()
package("swirl")
library(swirl)
swirl()
swirl()
rm(list-ls())
rm(list=ls())
?substr
library(swirl)
rm(list=ls())
swirl()
read.csv(path2csv, stringsAsFactors = TRUE)
mydfs <- read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydfs)
head(mydf)
library(dplyr)
packageVersion("dplyr")
save()
save.image()
exit
quit
bye()
aa
quit()
sessionInfo()
library(swirl)
swirl()
rm(list=ls())
swirl()
cran<- tbl_df(mydf)
help()
swirl()
mydf <- read.csv(file = path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dply")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
size(cran)
object.size(cran)
object_size(cran)
object_size(cran, units="MB")
object.size(cran, units="MB")
object.size(cran, units="Mb")
format(object.size(cran, units="Mb"))
format(object.size(cran), units="Mb")
as_tibble()
as_tibble(cran)
cran
rm(list=ls())
setwd("~/Projetos/Iniciacao_Cientifica_FIEO/obj/")
load(".RData")
## Arquivo com as funções necessárias para coletar os dados gerados pelo dispositivo conectado ##
require("dplyr")
require("tibble")
require("serial")
source("main.R")
arquivoTemp <-tempfile()
reiniciaConexao(conexao)
qntMaxAmostra <- 100
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
arquivoTemp <- tempfile()
#arquivoTemp <- tempfile()
arquivoTemp <- "../tmp"
reiniciaConexao(conexao)
qntMaxAmostra <- 100
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
obtemAmostra(conexao, arquivoTemp)
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
arquivoTemp <- tempfile()
reiniciaConexao(conexao)
qntMaxAmostra <- 100
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
if(!isOpen(conexao)){
open(conexao)
} else {
message("Atenção: A porta definida já está com conexão aberta.")
}
arquivoTemp <- tempfile()
reiniciaConexao(conexao)
qntMaxAmostra <- 100
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
#
#arquivoTemp <- tempfile()
arquivoTemp <- "../tmp"
reiniciaConexao(conexao)
qntMaxAmostra <- 100
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
obtemAmostra(conexao, arquivoTemp)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(1:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
plot(i:(qntMaxAmostra -1), amostra[,2])
qntMaxAmostra <- 100
for(i in 1:qntMaxAmostra){
Sys.sleep(0.200)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(i:(qntMaxAmostra -1), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
for(i in 1:qntMaxAmostra){
Sys.sleep(1)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(i:(qntMaxAmostra -1), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
plot(i:(qntMaxAmostra -1), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
obtemAmostra(conexao, arquivoTemp)
for(i in 1:qntMaxAmostra){
Sys.sleep(1)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(i:(qntMaxAmostra -1), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
qntMaxAmostra <- 50
for(i in 1:qntMaxAmostra){
Sys.sleep(1)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(i:(qntMaxAmostra -1), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
obtemAmostra(conexao, arquivoTemp)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(i:(qntMaxAmostra -1), amostra[,2])
plot(i:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
for(i in 1:qntMaxAmostra){
Sys.sleep(1)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(i:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
for(i in 1:qntMaxAmostra){
Sys.sleep(1)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
plot(i:nrow(amostra), amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
amostra
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = "."
)
amostra
readLines(arquivoTemp)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = ".",
skipNul = TRUE
)
obtemAmostra(conexao, arquivoTemp)
amostra
readLines(arquivoTemp)
head(readLines(arquivoTemp))
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = ".",
skipNul = 3
)
plot(i:nrow(amostra), amostra$X2)
obtemAmostra(conexao, arquivoTemp)
for(i in 1:qntMaxAmostra){
Sys.sleep(1)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = ".",
skipNul = 3
)
plot(x = i:nrow(amostra), y = amostra$X2)
obtemAmostra(conexao, arquivoTemp)
}
amostra
plot(x = i:nrow(amostra), y = amostra[i,2])
amostra[1,2]
plot(x = i:nrow(amostra), y = amostra[,2])
for(i in 1:qntMaxAmostra){
Sys.sleep(1)
amostra <- read.csv2(file = arquivoTemp,
stringsAsFactors = FALSE,
na.strings = "NA",
dec = ".",
skipNul = 3
)
plot(x = i:nrow(amostra), y = amostra[,2])
obtemAmostra(conexao, arquivoTemp)
}
