}
definePortaLinux <- function(porta = validaPortaLinux()){
porta
}
close(con)
rm(con)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1")
x
x$port
open(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
close(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1", newline = TRUE)
open(x)
read.serialConnection(x)
close(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1", newline = TRUE, translation = "crlf")
open(x)
read.serialConnection(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1")
close(x)
rm(x)
x <- serialConnection(name="tty", port = definePortaLinux(), mode = "9600,n,8,1")
open(x)
read.serialConnection(x)
read.serialConnection(x)
read.serialConnection(x)
close(x)
rm(x)
require("serial")
# Definição da porta serial emulada
validaPortaLinux <- function(){
devDir <- list.files("/dev/")
portaTTY <- grep("ttyUSB", devDir)
if(length(portaTTY) > 1)
stop("Ha mais de uma porta ttyUSB*. Favor identificar a correta e utilizar a funcao definePortaLinux")
else
devDir[portaTTY]
}
definePortaLinux <- function(porta = validaPortaLinux()){
porta
}
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1")
open(conexao)
read.serialConnection(conexao)
# Fim da conexão com o dispositivo
close(conexao)
read.serialConnection(conexao)
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
a <- read.serialConnection(conexao)
a
class(a)
file?
?file
arquivoTemp <- tempfile()
?write.table
isOpen(conexao)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\r")
read.csv(arquivoTemp)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\n")
read.csv(arquivoTemp)
read.csv(arquivoTemp)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\n")
read.csv(arquivoTemp)
a <- read.csv(arquivoTemp)
a
class(a)
a$x
read.serialConnection(conexao)
?read.serialConnection(conexao)
read.serialConnection(conexao)
write.table(read.serialConnection(conexao), file = arquivoTemp, eol = "\r")
read.table(arquivoTemp)
read.table(arquivoTemp, sep = "\n")
write.table(read.serialConnection(conexao), file = arquivoTemp)
read.table(arquivoTemp)
?data.frame
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
close(conexao)
read.serialConnection(conexao)
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
?read.serialConnection
?serialConnection
?serialConnection
close(x)
isOpen(conexao)
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "crlf")
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
open(conexao)
read.serialConnection(conexao)
# Fim da conexão com o dispositivo
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "crlf")
open(conexao)
read.serialConnection(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
close(conexao)
# Inicio da conexão com o dispositivo
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
open(conexao)
read.serialConnection(conexao)
read.serialConnection(conexao)
swirl()
package("swirl")
library(swirl)
swirl()
swirl()
rm(list-ls())
rm(list=ls())
?substr
library(swirl)
rm(list=ls())
swirl()
read.csv(path2csv, stringsAsFactors = TRUE)
mydfs <- read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydfs)
head(mydf)
library(dplyr)
packageVersion("dplyr")
save()
save.image()
exit
quit
bye()
aa
quit()
rm(list=ls())
setwd("~/Projetos/Iniciacao_Cientifica_FIEO/obj/")
load(".RData")
isOpen(conexao)
X
x
rm(x)
rm(arquivoTemp)
definePortaLinux()
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
## Carregamento dos pacotes necessários
require("serial")
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
isOpen(conexao)
scan(paste0("/dev/",conexao$port), n=1)
read.serialConnection(conexao)
if(!isOpen(conexao)){
open(conexao)
} else {
message("Atenção: A porta definida já está com conexão aberta.")
}
read.serialConnection(conexao)
read.serialConnection(conexao)
length(read.serialConnection(conexao))
length(read.serialConnection(conexao))
length(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
nchar(read.serialConnection(conexao))
while(TRUE){
nchar(read.serialConnection(conexao))
}
while(TRUE){
x <- read.serialConnection(conexao)
nchar(x)
}
while(TRUE){
x <- read.serialConnection(conexao)
nchar(x)
}
while(TRUE){
x <- read.serialConnection(conexao)
nchar(x)
Sys.sleep(0.101)
}
while(TRUE){
Sys.sleep(1)
x <- read.serialConnection(conexao)
Sys.sleep(1)
nchar(x)
}
while(TRUE){
Sys.sleep(1)
x <- read.serialConnection(conexao)
Sys.sleep(1)
print(nchar(x))
}
while(TRUE){
x <- read.serialConnection(conexao)
print(nchar(x))
}
while(TRUE){
Sys.sleep(5)
x <- read.serialConnection(conexao)
print(nchar(x))
}
while(TRUE){
x <- read.serialConnection(conexao)
print(nchar(x))
Sys.sleep(5)
}
?require()
## Carregamento dos pacotes necessários
if(require("serial"))
## Carregamento dos pacotes necessários
if(require("serial"))
## Carregamento dos pacotes necessários
if(!require("serial"))
## Carregamento dos pacotes necessários
if(!require("serial")){}
## Carregamento dos pacotes necessários
if(!require("serial")){
print("Oi")
}
## Carregamento dos pacotes necessários
if(!require("serial")){
print("Oi")
}
## Carregamento dos pacotes necessários
if(require("serial")){
print("Oi")
}
## Carregamento dos pacotes necessários
if(require("serial")){
print("Oi")
}
isTRUE(require("xml"))
## Carregamento dos pacotes necessários
require("serial")
isTRUE(require("xml"))
isTRUE(require("serial"))
parametrizaAmostra <- function(observacoes = 1){
list(obs = observacoes)
}
a <- parametrizaAmostra()
a
a <- parametrizaAmostra(22)
a
nObs <- 50
Temperature <- rep(NA, nObs)
Temperature
cycle <- 0
time <- ((cycle*nObs):((cycle+1)*(nObs)))[-1]
time
cycle * nObs
(cycle+1) * nObs
plot(Temperature ~ time, t="n", ylim=c(18, 24),
main="Data stream from Arduino via USB port")
rm(list=ls())
x <- read.serialConnection(conexao)
validaPortaLinux <- function(){
## Varre a pasta /dev/ de um sistema Unix para validar
# em qual arquivo a porta serial foi emulada. Retorna
# a porta válida encontrada ou um erro caso haja mais
# de uma porta emulada. Método "get".
devDir <- list.files("/dev/")
portaTTY <- grep("ttyUSB", devDir)
if(length(portaTTY) > 1)
stop("Ha mais de uma porta ttyUSB*. Favor identificar a correta e utilizar a funcao definePortaLinux")
else
devDir[portaTTY]
}
definePortaLinux <- function(porta = validaPortaLinux()){
## Define a porta com conforme varredura da função
# validaPortaLinux() ou conforme endereço passado
# por parâmetro. Método "set".
porta
}
conexao <- serialConnection(name="tty",
port = definePortaLinux(),
mode = "9600,n,8,1",
translation = "cr")
if(!isOpen(conexao)){
open(conexao)
} else {
message("Atenção: A porta definida já está com conexão aberta.")
}
close(conexao)
if(!isOpen(conexao)){
open(conexao)
} else {
message("Atenção: A porta definida já está com conexão aberta.")
}
x <- read.serialConnection(conexao)
x
x <- read.serialConnection(conexao)
x
readLines(read.serialConnection(conexao))
if(!isOpen(conexao)){
open(conexao)
} else {
message("Atenção: A porta definida já está com conexão aberta.")
}
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=50 )
readLines(paste0("/dev/",conexao$port), n=50 )
readLines(paste0("/dev/",conexao$port), n=50 )
readLines(paste0("/dev/",conexao$port), n=50 )
readLines(paste0("/dev/",conexao$port), n=50 )
readLines(paste0("/dev/",conexao$port), n=50 )
readLines(paste0("/dev/",conexao$port), n=50 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=1 )
readLines(paste0("/dev/",conexao$port), n=50 )
readLines(paste0("/dev/",conexao$port), n=1 )
x
?sep()
x[1]
x[1][1]
x[[1]]
arquivoTemp <-tempfile()
writeLines(text = read.serialConnection(conexao),
con = arquivoTemp,
sep = "\n")
read.table(arquivoTemp)
amostra <- read.table(file = arquivoTemp)
class(amostra)
class(amostra[,1])
amostra <- read.table(file = arquivoTemp, colClasses = "numeric")
amostra <- read.table(file = arquivoTemp, colClasses = "numeric", dec = ".")
amostra <- read.table(file = arquivoTemp, stringsAsFactors = FALSE, colClasses = "numeric", dec = ".")
amostra <- read.table(file = arquivoTemp, stringsAsFactors = FALSE)
class(amostra[,1])
?sapply
sapply(amostra, as.numeric)
sapply(amostra, as.numeric)
is.na(amostra)
which(is.na(amostra))
sapply(amostra, as.numeric)
mapply(amostra, as.numeric)
amostra
amostra[,25]
amostra[25]
amostra[,25]
amostra[1,25]
amostra[1,25]
amostra[2,25]
amostra
amostra[1][28]
amostra[1,28
]
amostra["70"]
amostra["70","V1"]
head(amostra)
amostra[70,1]
as.numeric(amostra[70,1])
?as.numeric
as.numeric(factor(5:10))
factor(5:10)
as.numeric(factor(5:10))
as.numeric(as.character(factor(5:10)))
as.numeric(as.character(amostra[70,1]))
f <- factor(1:5)
levels(f)
as.numeric(levels(f))
as.numeric(levels(amostra[70,1]))
as.numeric(levels(amostra[70,1]))[f]
(levels(amostra[70,1]))
levels(amostra[70,1])
levels(amostra)
class[1,]
class[,1]
class[10,1]
class(amostra[,1])
amostra <- read.table(file = arquivoTemp,
stringsAsFactors = TRUE)
as.numeric(amostra[,1])
amostra[,1]
amostra <- read.table(file = arquivoTemp,
stringsAsFactors = FALSE)
as.numeric(amostra[,1])
amostra <- read.table(file = arquivoTemp, stringsAsFactors = FALSE)
## Arquivo com as funções necessárias para coletar os dados gerados pelo dispositivo conectado ##
require("dplyr")
amostra <- read.table(file = arquivoTemp, stringsAsFactors = TRUE)
levels(amostra)
levels(amostra[,1])
# Fim da conexão com o dispositivo
close(conexao)
amostra <- read.table(file = arquivoTemp, stringsAsFactors = TRUE, nrows = 50)
summary(amostra)
as.numeric(amostra[,1])
as.numeric(levels(amostra[,1]))
amostra <- read.table(file = arquivoTemp, stringsAsFactors = TRUE, nrows = 50)
as.numeric(amostra[,1])
class(amostra[,1])
stringsAsFactors
amostra <- read.table(file = arquivoTemp, stringsAsFactors = FALSE, nrows = 50)
class(amostra[,1])
as.numeric(amostra[,1])
as.numeric("20.45")
as.numeric("20.00")
isOpen(conexao)
save.image(".RData")
savehistory(".Rhistory")
q("no")
